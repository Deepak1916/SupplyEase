version: 0.2

phases:
  install:
    commands:
      # Download and install SonarQube Scanner is it is not exisited already in the build environment.
      - if [ ! -f /opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner ]; then
          echo "SonarQube Scanner not found in cache. Downloading...";
          curl -o /tmp/sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip;
          unzip /tmp/sonar-scanner-cli.zip -d /opt;
          echo "SonarQube Scanner downloaded and cached.";
        else
          echo "Using cached SonarQube Scanner.";
        fi
      #Exports path to variable PATH.
      - export PATH=/opt/sonar-scanner-5.0.1.3006-linux/bin:$PATH
      - export SONAR_SCANNER_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED"

      # Ensure Java is already installed in the environment.
      - echo "Verifying Java installation"
      - java -version

      # Installing dependencies for the test to run.
      - echo "Installing Python and dependencies"
      - pip install pytest 
      - pip install pytest-cov 
      - pip install bcrypt

  pre_build:
    commands:
      - echo "Starting pre-build phase"
      - echo "Verifying environment variables"
      # Print environment variables for debugging.
      - echo "SONAR_TOKEN=$SONAR_TOKEN"
      - echo "Environment setup complete"
      # Run tests and generate coverage report
      - pytest --cov=./ --cov-report=xml  

  build:
    commands:
      # Running sonar scanner command.
      - echo "Running SonarQube analysis for application"
      - sonar-scanner -Dsonar.projectKey=devops-dpk_devops -Dsonar.organization=devops-dpk -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=801388c801f391fa388de6c7872816f11891c3bc -Dsonar.python.coverage.reportPaths=coverage.xml

artifacts:
  files:
    - '**/*'
  discard-paths: yes

cache:
  paths:
    - '/opt/sonar-scanner-5.0.1.3006-linux'
    - '/root/.cache/pip'

  


