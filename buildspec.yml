version: 0.2

phases:
  install:
    commands:
      - echo "Installing SonarQube Scanner..."
      # Download and install SonarQube Scanner in the build environment.
      - curl -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
      - unzip sonar-scanner.zip -d /opt/
      - export PATH=/opt/sonar-scanner-4.7.0.2747-linux/bin:$PATH
      - echo "SonarQube Scanner installed successfully"
      - export SONAR_SCANNER_OPTS="--add-opens java.base/java.lang=ALL-UNNAMED"

      # # Verify Java installation (required by SonarQube Scanner)
      # - java -version || sudo yum install -y java-17-openjdk
      # - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      # - export PATH=$JAVA_HOME/bin:$PATH
      # - echo "Java setup complete"
      - yum install java-17-amazon-corretto
      - yum install java-17-amazon-corretto-devel -y
      - alternatives --set java /usr/lib/jvm/java-17-amazon-corretto.aarch64/bin/java

      # Installing dependencies for the test to run.
      - echo "Installing Python and dependencies"
      - pip install pytest 
      - pip install pytest-cov 
      - pip install bcrypt

  pre_build:
    commands:
      - echo "Starting pre-build phase"
      - echo "Verifying environment variables"
      # Print environment variables for debugging.
      - echo "SONAR_TOKEN=$SONAR_TOKEN"
      - echo "Environment setup complete"
      #- echo "Running tests and generating coverage report"
      #- export PYTHONPATH=$PYTHONPATH:/codebuild/output/*/src
      - pytest --cov=./ --cov-report=xml  # Run tests and generate coverage report

  build:
    commands:
      - echo "Running SonarQube analysis for application"
      - sonar-scanner -Dsonar.projectKey=devops-dpk_devops -Dsonar.organization=devops-dpk -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=801388c801f391fa388de6c7872816f11891c3bc -Dsonar.python.coverage.reportPaths=coverage.xml

artifacts:
  files:
    - '**/*'
  discard-paths: yes

  
